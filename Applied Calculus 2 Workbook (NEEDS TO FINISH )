{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.3"
    },
    "colab": {
      "name": "Copy of Applied Calculus 2022 - Python Workbook 2.ipynb",
      "provenance": [],
      "include_colab_link": true
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kantok3/files/blob/main/Applied%20Calculus%202%20Workbook%20(NEEDS%20TO%20FINISH%20)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-JUxolDI5KQa"
      },
      "source": [
        "# IMPORTANT:\n",
        "\n",
        "* If uploading this workbook from Google Colab, you should save a copy in your own Google drive and work on that copy before answering any exercises. Otherwise any changes you make may not be saved to the workbook."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fEO9D8FL2_TJ"
      },
      "source": [
        "### Name: Anthony Kielthy\n",
        "### Student Number: 20096832"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8StfKvNF2_TR"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mvXed2fU2_TT"
      },
      "source": [
        "# Python Workbook 2 - Grpahs and Asymptotes\n",
        "\n",
        "In this Python workbook we will examine functions which have vertical and horizontal asymptotes. \n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#### Vertical Asymptotes\n",
        "\n",
        "A vertical asymptote occurs in rational functions of the form\n",
        "$$\n",
        " f(x)=\\frac{ax-b}{cx-d}\n",
        "$$\n",
        "at $x=\\frac{d}{c}$. This is because, when $x=\\frac{d}{c}$, the function becomes\n",
        "$$\n",
        " f(\\frac{d}{c} )=\\frac{a\\frac{d}{c}-a}{c\\frac{d}{c}-d}=\\frac{ad-ca}{cd-cd}=\\frac{ad-ca}{0},\n",
        "$$\n",
        "which results in __division by zero__."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uwAveNpo2_TT"
      },
      "source": [
        "### Example 1\n",
        "\n",
        "__Part 1__ Create a Python function to represent the rational function\n",
        "$$\n",
        "f(x)=\\frac{x-3}{2x-5}.\n",
        "$$\n",
        "\n",
        "\n",
        "__Part 2__ Determine where the above function has a singulairty.\n",
        "\n",
        "\n",
        "__Part 3__ Confirm that this point is a singulairty by tring to evaluate the Python function at that point."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "APEzqnA-2_TU"
      },
      "source": [
        "#### Solution - Part 1"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FMZNMcyo2_TV"
      },
      "source": [
        "def f(x):\n",
        "    return (x-3)/(2*x-5)"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4sscuzmh2_TW"
      },
      "source": [
        "#### Solution - Part 2\n",
        "\n",
        "* The function has a singularity whenever the denominator (bottom) becomes zero.\n",
        "\n",
        "* To find this singularity, we just set the bottom equal to zero and solve for $x$:\n",
        "\n",
        "$$\n",
        "2x-5 = 0 \\Rightarrow 2x=5 \\Rightarrow x=\\frac{5}{2}=2.5\n",
        "$$\n",
        "\n",
        "* When $x=\\frac{5}{2}=2.5$, this function will return an error, because the function will try to divide by zero, which it is unable to perform (see cell below)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TFhIatUc2_TW"
      },
      "source": [
        "#### Solution - Part 3"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 234
        },
        "id": "Kj0QEA7T2_TX",
        "outputId": "486aa1a0-0273-48f3-9fcd-266e2df0cc4e"
      },
      "source": [
        "f(5.0/2.0)"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ZeroDivisionError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mZeroDivisionError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-4-212922af2a4c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m5.0\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;36m2.0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-2-564e7b5a747c>\u001b[0m in \u001b[0;36mf\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mZeroDivisionError\u001b[0m: float division by zero"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 248
        },
        "id": "waL2AMFW67rl",
        "outputId": "00bc40e7-3bb0-4d9a-abb4-63e8967f5b0e"
      },
      "source": [
        "f(2.5)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ZeroDivisionError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mZeroDivisionError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-11-b9a16f6b5091>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2.5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-9-564e7b5a747c>\u001b[0m in \u001b[0;36mf\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mZeroDivisionError\u001b[0m: float division by zero"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YXt1DAGb2_TZ"
      },
      "source": [
        "* We see that trying to evaluate __f__ at 5/2 returns an error indicating Python is trying to __divide by zero__.\n",
        "\n",
        "* __NOTE:__ This is supposed to happen, it indicates the function is defined correctly."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "X_j0fSG72_Ta"
      },
      "source": [
        "## Exercise 1: \n",
        "__Part 1__\n",
        "Create a Python function to represent the matmatical function\n",
        "$$\n",
        " g(x)=\\frac{x+4}{5x-6}  \n",
        "$$"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0zuPKhMJ2_Tb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bc1d4707-5d98-4cf9-8749-51927da3261b"
      },
      "source": [
        "def g(x):\n",
        "  return(x+4)/(5*x-6)\n",
        "print(g)"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<function g at 0x7f5f5dd4a8c0>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        ""
      ],
      "metadata": {
        "id": "6BX6LqjPycOn"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2QK5xSZN2_Tc"
      },
      "source": [
        "__Part 2__ At what value of $x$ do you expect $g(x)$ to become undefined?\n",
        "\n",
        "__Answer:__ "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YUNOuNdq2_Tc"
      },
      "source": [
        "__Part 3__ Use the Python function you defined in __Part 1__ to evaluate the function at the value of $x$ in __Part 2__. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9ztE_rLj2_Td",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 252
        },
        "outputId": "601de6d3-d4cf-42fe-ab61-78502736ddd4"
      },
      "source": [
        "g(1.2)"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ZeroDivisionError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mZeroDivisionError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-6-5d8e179a9a82>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mg\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1.2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-5-2dad59fbf70e>\u001b[0m in \u001b[0;36mg\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mg\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m   \u001b[0;32mreturn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mZeroDivisionError\u001b[0m: float division by zero"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YbT6-6DC2_Td"
      },
      "source": [
        "## Singularities and vertical asymptotes\n",
        "\n",
        "* The value of $x$ where the denominator of $f(x)$ becomes _zero_ is called a __singularity__ of $f(x)$.  \n",
        "\n",
        "\n",
        "* If we plot the graph of $f(x)$, it will result in a vertical line at this value of $x$, called a __vertical asymptote__.\n",
        "\n",
        "\n",
        "* However, if we try to plot $f(x)$, using the __plot()__ function, over an interval which contains this singularity, it will result in an error, since __numpy__ is not able to evaluate this fuction at the singulairty."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2f0383gv2_Te"
      },
      "source": [
        "## Example 2\n",
        "\n",
        "Use the __plot()__ function to plot \n",
        "$$\n",
        " h(x)=\\frac{x+5}{x-4},\n",
        "$$\n",
        "over the interval $0\\leq x<8$."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "H7t9IvB12_Tf"
      },
      "source": [
        "###  Wrong Solution\n",
        "\n",
        "* This function will have a singularity at $4$, because when $x=4$ the denominator becomes _zero_. \n",
        "\n",
        "\n",
        "* If we try to plot this in the usual way, we first create the interval using the __linspace()__ function we saw in Workbook 1. \n",
        "\n",
        "\n",
        "* As a first step, we create a Python function to represent this mathematical function in the usual way."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WZGAKNYF2_Tf"
      },
      "source": [
        "def h(x):\n",
        "    return (x+5.0)/(x-4.0)"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "i19vS1r62_Tf"
      },
      "source": [
        "* Next we create the plotting domain using the function __linspace()__ function, as follows:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lfm8ymbP2_Tf",
        "outputId": "2c83c344-93b2-4b8e-e002-37eea3ac4434"
      },
      "source": [
        "X=np.linspace(0,8,501)\n",
        "X"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.   , 0.016, 0.032, 0.048, 0.064, 0.08 , 0.096, 0.112, 0.128,\n",
              "       0.144, 0.16 , 0.176, 0.192, 0.208, 0.224, 0.24 , 0.256, 0.272,\n",
              "       0.288, 0.304, 0.32 , 0.336, 0.352, 0.368, 0.384, 0.4  , 0.416,\n",
              "       0.432, 0.448, 0.464, 0.48 , 0.496, 0.512, 0.528, 0.544, 0.56 ,\n",
              "       0.576, 0.592, 0.608, 0.624, 0.64 , 0.656, 0.672, 0.688, 0.704,\n",
              "       0.72 , 0.736, 0.752, 0.768, 0.784, 0.8  , 0.816, 0.832, 0.848,\n",
              "       0.864, 0.88 , 0.896, 0.912, 0.928, 0.944, 0.96 , 0.976, 0.992,\n",
              "       1.008, 1.024, 1.04 , 1.056, 1.072, 1.088, 1.104, 1.12 , 1.136,\n",
              "       1.152, 1.168, 1.184, 1.2  , 1.216, 1.232, 1.248, 1.264, 1.28 ,\n",
              "       1.296, 1.312, 1.328, 1.344, 1.36 , 1.376, 1.392, 1.408, 1.424,\n",
              "       1.44 , 1.456, 1.472, 1.488, 1.504, 1.52 , 1.536, 1.552, 1.568,\n",
              "       1.584, 1.6  , 1.616, 1.632, 1.648, 1.664, 1.68 , 1.696, 1.712,\n",
              "       1.728, 1.744, 1.76 , 1.776, 1.792, 1.808, 1.824, 1.84 , 1.856,\n",
              "       1.872, 1.888, 1.904, 1.92 , 1.936, 1.952, 1.968, 1.984, 2.   ,\n",
              "       2.016, 2.032, 2.048, 2.064, 2.08 , 2.096, 2.112, 2.128, 2.144,\n",
              "       2.16 , 2.176, 2.192, 2.208, 2.224, 2.24 , 2.256, 2.272, 2.288,\n",
              "       2.304, 2.32 , 2.336, 2.352, 2.368, 2.384, 2.4  , 2.416, 2.432,\n",
              "       2.448, 2.464, 2.48 , 2.496, 2.512, 2.528, 2.544, 2.56 , 2.576,\n",
              "       2.592, 2.608, 2.624, 2.64 , 2.656, 2.672, 2.688, 2.704, 2.72 ,\n",
              "       2.736, 2.752, 2.768, 2.784, 2.8  , 2.816, 2.832, 2.848, 2.864,\n",
              "       2.88 , 2.896, 2.912, 2.928, 2.944, 2.96 , 2.976, 2.992, 3.008,\n",
              "       3.024, 3.04 , 3.056, 3.072, 3.088, 3.104, 3.12 , 3.136, 3.152,\n",
              "       3.168, 3.184, 3.2  , 3.216, 3.232, 3.248, 3.264, 3.28 , 3.296,\n",
              "       3.312, 3.328, 3.344, 3.36 , 3.376, 3.392, 3.408, 3.424, 3.44 ,\n",
              "       3.456, 3.472, 3.488, 3.504, 3.52 , 3.536, 3.552, 3.568, 3.584,\n",
              "       3.6  , 3.616, 3.632, 3.648, 3.664, 3.68 , 3.696, 3.712, 3.728,\n",
              "       3.744, 3.76 , 3.776, 3.792, 3.808, 3.824, 3.84 , 3.856, 3.872,\n",
              "       3.888, 3.904, 3.92 , 3.936, 3.952, 3.968, 3.984, 4.   , 4.016,\n",
              "       4.032, 4.048, 4.064, 4.08 , 4.096, 4.112, 4.128, 4.144, 4.16 ,\n",
              "       4.176, 4.192, 4.208, 4.224, 4.24 , 4.256, 4.272, 4.288, 4.304,\n",
              "       4.32 , 4.336, 4.352, 4.368, 4.384, 4.4  , 4.416, 4.432, 4.448,\n",
              "       4.464, 4.48 , 4.496, 4.512, 4.528, 4.544, 4.56 , 4.576, 4.592,\n",
              "       4.608, 4.624, 4.64 , 4.656, 4.672, 4.688, 4.704, 4.72 , 4.736,\n",
              "       4.752, 4.768, 4.784, 4.8  , 4.816, 4.832, 4.848, 4.864, 4.88 ,\n",
              "       4.896, 4.912, 4.928, 4.944, 4.96 , 4.976, 4.992, 5.008, 5.024,\n",
              "       5.04 , 5.056, 5.072, 5.088, 5.104, 5.12 , 5.136, 5.152, 5.168,\n",
              "       5.184, 5.2  , 5.216, 5.232, 5.248, 5.264, 5.28 , 5.296, 5.312,\n",
              "       5.328, 5.344, 5.36 , 5.376, 5.392, 5.408, 5.424, 5.44 , 5.456,\n",
              "       5.472, 5.488, 5.504, 5.52 , 5.536, 5.552, 5.568, 5.584, 5.6  ,\n",
              "       5.616, 5.632, 5.648, 5.664, 5.68 , 5.696, 5.712, 5.728, 5.744,\n",
              "       5.76 , 5.776, 5.792, 5.808, 5.824, 5.84 , 5.856, 5.872, 5.888,\n",
              "       5.904, 5.92 , 5.936, 5.952, 5.968, 5.984, 6.   , 6.016, 6.032,\n",
              "       6.048, 6.064, 6.08 , 6.096, 6.112, 6.128, 6.144, 6.16 , 6.176,\n",
              "       6.192, 6.208, 6.224, 6.24 , 6.256, 6.272, 6.288, 6.304, 6.32 ,\n",
              "       6.336, 6.352, 6.368, 6.384, 6.4  , 6.416, 6.432, 6.448, 6.464,\n",
              "       6.48 , 6.496, 6.512, 6.528, 6.544, 6.56 , 6.576, 6.592, 6.608,\n",
              "       6.624, 6.64 , 6.656, 6.672, 6.688, 6.704, 6.72 , 6.736, 6.752,\n",
              "       6.768, 6.784, 6.8  , 6.816, 6.832, 6.848, 6.864, 6.88 , 6.896,\n",
              "       6.912, 6.928, 6.944, 6.96 , 6.976, 6.992, 7.008, 7.024, 7.04 ,\n",
              "       7.056, 7.072, 7.088, 7.104, 7.12 , 7.136, 7.152, 7.168, 7.184,\n",
              "       7.2  , 7.216, 7.232, 7.248, 7.264, 7.28 , 7.296, 7.312, 7.328,\n",
              "       7.344, 7.36 , 7.376, 7.392, 7.408, 7.424, 7.44 , 7.456, 7.472,\n",
              "       7.488, 7.504, 7.52 , 7.536, 7.552, 7.568, 7.584, 7.6  , 7.616,\n",
              "       7.632, 7.648, 7.664, 7.68 , 7.696, 7.712, 7.728, 7.744, 7.76 ,\n",
              "       7.776, 7.792, 7.808, 7.824, 7.84 , 7.856, 7.872, 7.888, 7.904,\n",
              "       7.92 , 7.936, 7.952, 7.968, 7.984, 8.   ])"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QJp2l1wu2_Tg"
      },
      "source": [
        "This interval contains the singualirty $x=4$, and so when we try to plot it using the function __plt.plot()__, we will get an error (see code cell below)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 301
        },
        "id": "C9Z-N0gi2_Tg",
        "outputId": "d0c821e3-026a-45b4-f431-10e57bd91540"
      },
      "source": [
        "plt.plot(X,h(X)) \n",
        "plt.show()"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: RuntimeWarning: divide by zero encountered in true_divide\n",
            "  \n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cbQMZbX02_Tg"
      },
      "source": [
        "* While we do get a plot, we also get a __RuntimeWarning__, as seen above."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "udJ3-aCB2_Th"
      },
      "source": [
        "###   Correct Solution \n",
        "* The problem with the plot above is the way we created the domain __X__. \n",
        "\n",
        "* If we want to plot __h__, then we must create a domain __X__ which __excludes $x=4$__.\n",
        "\n",
        "* We do this using the __numpy__ function __where__ as folllows:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-nsPKHOr2_Th",
        "outputId": "814dfaaa-ca71-43cc-9900-a141196a6195"
      },
      "source": [
        "np.where(X!=4)"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,\n",
              "         13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,\n",
              "         26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,\n",
              "         39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,\n",
              "         52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,\n",
              "         65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,\n",
              "         78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,\n",
              "         91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,\n",
              "        104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,\n",
              "        117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,\n",
              "        130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,\n",
              "        143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,\n",
              "        156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,\n",
              "        169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,\n",
              "        182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,\n",
              "        195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,\n",
              "        208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,\n",
              "        221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,\n",
              "        234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,\n",
              "        247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260,\n",
              "        261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273,\n",
              "        274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286,\n",
              "        287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299,\n",
              "        300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312,\n",
              "        313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325,\n",
              "        326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338,\n",
              "        339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351,\n",
              "        352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364,\n",
              "        365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377,\n",
              "        378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390,\n",
              "        391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403,\n",
              "        404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416,\n",
              "        417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429,\n",
              "        430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442,\n",
              "        443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455,\n",
              "        456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468,\n",
              "        469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481,\n",
              "        482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494,\n",
              "        495, 496, 497, 498, 499, 500]),)"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EFOJ3P7v2_Ti"
      },
      "source": [
        "* __np.where(X!=4)__ returns the __index__ of all the __X__-values which are not equal to 4, i.e. __X!=4__\n",
        "\n",
        "* The __index__ is the location of a specific value in the array, it is __not__ the __X__-value value itself.\n",
        "\n",
        "* For example, the value __0.016__ in __X__ has __index 1__ (bacuase Python starts counting from 0).\n",
        "\n",
        "* The code above returns the __index__ of each __X__-value which is not 4.\n",
        "\n",
        "* To return the actual __X__-values which are not 4 we do the following:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tm48cw9X2_Tj",
        "outputId": "11c381e4-e739-4f28-d6a7-1385c1aa1a5b"
      },
      "source": [
        "x=X[np.where(X!=4)]\n",
        "x"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.   , 0.016, 0.032, 0.048, 0.064, 0.08 , 0.096, 0.112, 0.128,\n",
              "       0.144, 0.16 , 0.176, 0.192, 0.208, 0.224, 0.24 , 0.256, 0.272,\n",
              "       0.288, 0.304, 0.32 , 0.336, 0.352, 0.368, 0.384, 0.4  , 0.416,\n",
              "       0.432, 0.448, 0.464, 0.48 , 0.496, 0.512, 0.528, 0.544, 0.56 ,\n",
              "       0.576, 0.592, 0.608, 0.624, 0.64 , 0.656, 0.672, 0.688, 0.704,\n",
              "       0.72 , 0.736, 0.752, 0.768, 0.784, 0.8  , 0.816, 0.832, 0.848,\n",
              "       0.864, 0.88 , 0.896, 0.912, 0.928, 0.944, 0.96 , 0.976, 0.992,\n",
              "       1.008, 1.024, 1.04 , 1.056, 1.072, 1.088, 1.104, 1.12 , 1.136,\n",
              "       1.152, 1.168, 1.184, 1.2  , 1.216, 1.232, 1.248, 1.264, 1.28 ,\n",
              "       1.296, 1.312, 1.328, 1.344, 1.36 , 1.376, 1.392, 1.408, 1.424,\n",
              "       1.44 , 1.456, 1.472, 1.488, 1.504, 1.52 , 1.536, 1.552, 1.568,\n",
              "       1.584, 1.6  , 1.616, 1.632, 1.648, 1.664, 1.68 , 1.696, 1.712,\n",
              "       1.728, 1.744, 1.76 , 1.776, 1.792, 1.808, 1.824, 1.84 , 1.856,\n",
              "       1.872, 1.888, 1.904, 1.92 , 1.936, 1.952, 1.968, 1.984, 2.   ,\n",
              "       2.016, 2.032, 2.048, 2.064, 2.08 , 2.096, 2.112, 2.128, 2.144,\n",
              "       2.16 , 2.176, 2.192, 2.208, 2.224, 2.24 , 2.256, 2.272, 2.288,\n",
              "       2.304, 2.32 , 2.336, 2.352, 2.368, 2.384, 2.4  , 2.416, 2.432,\n",
              "       2.448, 2.464, 2.48 , 2.496, 2.512, 2.528, 2.544, 2.56 , 2.576,\n",
              "       2.592, 2.608, 2.624, 2.64 , 2.656, 2.672, 2.688, 2.704, 2.72 ,\n",
              "       2.736, 2.752, 2.768, 2.784, 2.8  , 2.816, 2.832, 2.848, 2.864,\n",
              "       2.88 , 2.896, 2.912, 2.928, 2.944, 2.96 , 2.976, 2.992, 3.008,\n",
              "       3.024, 3.04 , 3.056, 3.072, 3.088, 3.104, 3.12 , 3.136, 3.152,\n",
              "       3.168, 3.184, 3.2  , 3.216, 3.232, 3.248, 3.264, 3.28 , 3.296,\n",
              "       3.312, 3.328, 3.344, 3.36 , 3.376, 3.392, 3.408, 3.424, 3.44 ,\n",
              "       3.456, 3.472, 3.488, 3.504, 3.52 , 3.536, 3.552, 3.568, 3.584,\n",
              "       3.6  , 3.616, 3.632, 3.648, 3.664, 3.68 , 3.696, 3.712, 3.728,\n",
              "       3.744, 3.76 , 3.776, 3.792, 3.808, 3.824, 3.84 , 3.856, 3.872,\n",
              "       3.888, 3.904, 3.92 , 3.936, 3.952, 3.968, 3.984, 4.016, 4.032,\n",
              "       4.048, 4.064, 4.08 , 4.096, 4.112, 4.128, 4.144, 4.16 , 4.176,\n",
              "       4.192, 4.208, 4.224, 4.24 , 4.256, 4.272, 4.288, 4.304, 4.32 ,\n",
              "       4.336, 4.352, 4.368, 4.384, 4.4  , 4.416, 4.432, 4.448, 4.464,\n",
              "       4.48 , 4.496, 4.512, 4.528, 4.544, 4.56 , 4.576, 4.592, 4.608,\n",
              "       4.624, 4.64 , 4.656, 4.672, 4.688, 4.704, 4.72 , 4.736, 4.752,\n",
              "       4.768, 4.784, 4.8  , 4.816, 4.832, 4.848, 4.864, 4.88 , 4.896,\n",
              "       4.912, 4.928, 4.944, 4.96 , 4.976, 4.992, 5.008, 5.024, 5.04 ,\n",
              "       5.056, 5.072, 5.088, 5.104, 5.12 , 5.136, 5.152, 5.168, 5.184,\n",
              "       5.2  , 5.216, 5.232, 5.248, 5.264, 5.28 , 5.296, 5.312, 5.328,\n",
              "       5.344, 5.36 , 5.376, 5.392, 5.408, 5.424, 5.44 , 5.456, 5.472,\n",
              "       5.488, 5.504, 5.52 , 5.536, 5.552, 5.568, 5.584, 5.6  , 5.616,\n",
              "       5.632, 5.648, 5.664, 5.68 , 5.696, 5.712, 5.728, 5.744, 5.76 ,\n",
              "       5.776, 5.792, 5.808, 5.824, 5.84 , 5.856, 5.872, 5.888, 5.904,\n",
              "       5.92 , 5.936, 5.952, 5.968, 5.984, 6.   , 6.016, 6.032, 6.048,\n",
              "       6.064, 6.08 , 6.096, 6.112, 6.128, 6.144, 6.16 , 6.176, 6.192,\n",
              "       6.208, 6.224, 6.24 , 6.256, 6.272, 6.288, 6.304, 6.32 , 6.336,\n",
              "       6.352, 6.368, 6.384, 6.4  , 6.416, 6.432, 6.448, 6.464, 6.48 ,\n",
              "       6.496, 6.512, 6.528, 6.544, 6.56 , 6.576, 6.592, 6.608, 6.624,\n",
              "       6.64 , 6.656, 6.672, 6.688, 6.704, 6.72 , 6.736, 6.752, 6.768,\n",
              "       6.784, 6.8  , 6.816, 6.832, 6.848, 6.864, 6.88 , 6.896, 6.912,\n",
              "       6.928, 6.944, 6.96 , 6.976, 6.992, 7.008, 7.024, 7.04 , 7.056,\n",
              "       7.072, 7.088, 7.104, 7.12 , 7.136, 7.152, 7.168, 7.184, 7.2  ,\n",
              "       7.216, 7.232, 7.248, 7.264, 7.28 , 7.296, 7.312, 7.328, 7.344,\n",
              "       7.36 , 7.376, 7.392, 7.408, 7.424, 7.44 , 7.456, 7.472, 7.488,\n",
              "       7.504, 7.52 , 7.536, 7.552, 7.568, 7.584, 7.6  , 7.616, 7.632,\n",
              "       7.648, 7.664, 7.68 , 7.696, 7.712, 7.728, 7.744, 7.76 , 7.776,\n",
              "       7.792, 7.808, 7.824, 7.84 , 7.856, 7.872, 7.888, 7.904, 7.92 ,\n",
              "       7.936, 7.952, 7.968, 7.984, 8.   ])"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3ITvrpVq2_Tk"
      },
      "source": [
        "* Reading through this list of numbers you will find there is no value exactly equal to 4, as required.\n",
        "\n",
        "* We now use this __excised__ interval __x__ to plot the function."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 266
        },
        "id": "EuuNWli32_Tk",
        "outputId": "fee90764-8f16-4c9a-b16c-f377944ab6ba"
      },
      "source": [
        "plt.plot(x,h(x),color=\"green\")\n",
        "plt.show()"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oEUoDqn32_Tk"
      },
      "source": [
        "* __NO RUNTIME WARNING:__ As you can see we no longer get a __RuntimeWarning__\n",
        "since the denominator of __h__ does not become zero at any value in the excised array __x__.\n",
        "\n",
        "### Changing y-limits & zooming in\n",
        "\n",
        "* We can see from this plot that the $y$-axis lies in the range $-600\\leq y\\leq 600$. \n",
        "\n",
        "\n",
        "* To make this range smaller, and to increase the detail of the plot, we can use the __ylim([,])__ function to set the __y-limits__ of the plot. \n",
        "\n",
        "\n",
        "* In the cell below, we restrict the $y$-axis to the range $-100\\leq y\\leq 100$."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        },
        "id": "pD-cMjtM2_Tk",
        "outputId": "caba1937-4977-4539-cff2-2fb52ad57f50"
      },
      "source": [
        "plt.plot(x,h(x),color=\"red\")\n",
        "plt.ylim([-100,100])\n",
        "plt.show()"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZbNfeVpQ2_Tl"
      },
      "source": [
        "### The vertical asymptote\n",
        "\n",
        "* The last step to creating this plot is to include a plot of the vertical asymptote also. This is the vertical line which the function approaches, either side of 4.\n",
        "\n",
        "\n",
        "* This is achieved using the function __axvline()__ which will plot a vertical line at some point along the horizontal axis.\n",
        "\n",
        "\n",
        "* In this example we want to place a vertical asymptote at $x=4$, which we do in the following cell:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        },
        "id": "nxMHTbHL2_Tl",
        "outputId": "171f3454-c889-4a5f-a397-014af4fac656"
      },
      "source": [
        "plt.plot(x,h(x),color=\"red\")\n",
        "plt.axvline(4)\n",
        "plt.ylim([-100,100])\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5XsQiHc22_Tm"
      },
      "source": [
        "## Exercise 2\n",
        "\n",
        "__Part 1__ Create a Python function to represent the following ___rational function__\n",
        "$$\n",
        "U(t)=\\frac{3t-5}{4t+3}.\n",
        "$$\n",
        "\n",
        "\n",
        "\n",
        "__NOTE:__ This is called a __rational function__ because it is a __ratio (i.e. fraction)__ of two other functions $3t-5$ and $4t+3$."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lJcVBxNC2_Tm"
      },
      "source": [
        "def u(t):\n",
        "  return (3*t-5)/(4*t + 3)\n",
        "  "
      ],
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UGELKx0J2_Tm"
      },
      "source": [
        "__Part 2__ Confirm that this function has a singualrity at $-\\frac{3}{4}=-0.75$, i.e. show that Python returns an error at this value."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EMLRllP72_Tm",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "539e128a-d776-446f-9e41-155e0ffb96b1"
      },
      "source": [
        "g(0.7/0.5)"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "5.4"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        ""
      ],
      "metadata": {
        "id": "3G_dScQN4cJz"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "z-XAMovU2_Tm"
      },
      "source": [
        "__Part 3__ Create an appropriate excised interval for plotting this function."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Q_U1O0Ui2_Tn",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "15233ba5-5cc2-4691-8da6-db47c3dc146e"
      },
      "source": [
        "T = np.linspace(-0.75-5,0.75+5,501)\n",
        "t =T[np.where(T!=0.75)]\n",
        "t"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-5.75 , -5.727, -5.704, -5.681, -5.658, -5.635, -5.612, -5.589,\n",
              "       -5.566, -5.543, -5.52 , -5.497, -5.474, -5.451, -5.428, -5.405,\n",
              "       -5.382, -5.359, -5.336, -5.313, -5.29 , -5.267, -5.244, -5.221,\n",
              "       -5.198, -5.175, -5.152, -5.129, -5.106, -5.083, -5.06 , -5.037,\n",
              "       -5.014, -4.991, -4.968, -4.945, -4.922, -4.899, -4.876, -4.853,\n",
              "       -4.83 , -4.807, -4.784, -4.761, -4.738, -4.715, -4.692, -4.669,\n",
              "       -4.646, -4.623, -4.6  , -4.577, -4.554, -4.531, -4.508, -4.485,\n",
              "       -4.462, -4.439, -4.416, -4.393, -4.37 , -4.347, -4.324, -4.301,\n",
              "       -4.278, -4.255, -4.232, -4.209, -4.186, -4.163, -4.14 , -4.117,\n",
              "       -4.094, -4.071, -4.048, -4.025, -4.002, -3.979, -3.956, -3.933,\n",
              "       -3.91 , -3.887, -3.864, -3.841, -3.818, -3.795, -3.772, -3.749,\n",
              "       -3.726, -3.703, -3.68 , -3.657, -3.634, -3.611, -3.588, -3.565,\n",
              "       -3.542, -3.519, -3.496, -3.473, -3.45 , -3.427, -3.404, -3.381,\n",
              "       -3.358, -3.335, -3.312, -3.289, -3.266, -3.243, -3.22 , -3.197,\n",
              "       -3.174, -3.151, -3.128, -3.105, -3.082, -3.059, -3.036, -3.013,\n",
              "       -2.99 , -2.967, -2.944, -2.921, -2.898, -2.875, -2.852, -2.829,\n",
              "       -2.806, -2.783, -2.76 , -2.737, -2.714, -2.691, -2.668, -2.645,\n",
              "       -2.622, -2.599, -2.576, -2.553, -2.53 , -2.507, -2.484, -2.461,\n",
              "       -2.438, -2.415, -2.392, -2.369, -2.346, -2.323, -2.3  , -2.277,\n",
              "       -2.254, -2.231, -2.208, -2.185, -2.162, -2.139, -2.116, -2.093,\n",
              "       -2.07 , -2.047, -2.024, -2.001, -1.978, -1.955, -1.932, -1.909,\n",
              "       -1.886, -1.863, -1.84 , -1.817, -1.794, -1.771, -1.748, -1.725,\n",
              "       -1.702, -1.679, -1.656, -1.633, -1.61 , -1.587, -1.564, -1.541,\n",
              "       -1.518, -1.495, -1.472, -1.449, -1.426, -1.403, -1.38 , -1.357,\n",
              "       -1.334, -1.311, -1.288, -1.265, -1.242, -1.219, -1.196, -1.173,\n",
              "       -1.15 , -1.127, -1.104, -1.081, -1.058, -1.035, -1.012, -0.989,\n",
              "       -0.966, -0.943, -0.92 , -0.897, -0.874, -0.851, -0.828, -0.805,\n",
              "       -0.782, -0.759, -0.736, -0.713, -0.69 , -0.667, -0.644, -0.621,\n",
              "       -0.598, -0.575, -0.552, -0.529, -0.506, -0.483, -0.46 , -0.437,\n",
              "       -0.414, -0.391, -0.368, -0.345, -0.322, -0.299, -0.276, -0.253,\n",
              "       -0.23 , -0.207, -0.184, -0.161, -0.138, -0.115, -0.092, -0.069,\n",
              "       -0.046, -0.023,  0.   ,  0.023,  0.046,  0.069,  0.092,  0.115,\n",
              "        0.138,  0.161,  0.184,  0.207,  0.23 ,  0.253,  0.276,  0.299,\n",
              "        0.322,  0.345,  0.368,  0.391,  0.414,  0.437,  0.46 ,  0.483,\n",
              "        0.506,  0.529,  0.552,  0.575,  0.598,  0.621,  0.644,  0.667,\n",
              "        0.69 ,  0.713,  0.736,  0.759,  0.782,  0.805,  0.828,  0.851,\n",
              "        0.874,  0.897,  0.92 ,  0.943,  0.966,  0.989,  1.012,  1.035,\n",
              "        1.058,  1.081,  1.104,  1.127,  1.15 ,  1.173,  1.196,  1.219,\n",
              "        1.242,  1.265,  1.288,  1.311,  1.334,  1.357,  1.38 ,  1.403,\n",
              "        1.426,  1.449,  1.472,  1.495,  1.518,  1.541,  1.564,  1.587,\n",
              "        1.61 ,  1.633,  1.656,  1.679,  1.702,  1.725,  1.748,  1.771,\n",
              "        1.794,  1.817,  1.84 ,  1.863,  1.886,  1.909,  1.932,  1.955,\n",
              "        1.978,  2.001,  2.024,  2.047,  2.07 ,  2.093,  2.116,  2.139,\n",
              "        2.162,  2.185,  2.208,  2.231,  2.254,  2.277,  2.3  ,  2.323,\n",
              "        2.346,  2.369,  2.392,  2.415,  2.438,  2.461,  2.484,  2.507,\n",
              "        2.53 ,  2.553,  2.576,  2.599,  2.622,  2.645,  2.668,  2.691,\n",
              "        2.714,  2.737,  2.76 ,  2.783,  2.806,  2.829,  2.852,  2.875,\n",
              "        2.898,  2.921,  2.944,  2.967,  2.99 ,  3.013,  3.036,  3.059,\n",
              "        3.082,  3.105,  3.128,  3.151,  3.174,  3.197,  3.22 ,  3.243,\n",
              "        3.266,  3.289,  3.312,  3.335,  3.358,  3.381,  3.404,  3.427,\n",
              "        3.45 ,  3.473,  3.496,  3.519,  3.542,  3.565,  3.588,  3.611,\n",
              "        3.634,  3.657,  3.68 ,  3.703,  3.726,  3.749,  3.772,  3.795,\n",
              "        3.818,  3.841,  3.864,  3.887,  3.91 ,  3.933,  3.956,  3.979,\n",
              "        4.002,  4.025,  4.048,  4.071,  4.094,  4.117,  4.14 ,  4.163,\n",
              "        4.186,  4.209,  4.232,  4.255,  4.278,  4.301,  4.324,  4.347,\n",
              "        4.37 ,  4.393,  4.416,  4.439,  4.462,  4.485,  4.508,  4.531,\n",
              "        4.554,  4.577,  4.6  ,  4.623,  4.646,  4.669,  4.692,  4.715,\n",
              "        4.738,  4.761,  4.784,  4.807,  4.83 ,  4.853,  4.876,  4.899,\n",
              "        4.922,  4.945,  4.968,  4.991,  5.014,  5.037,  5.06 ,  5.083,\n",
              "        5.106,  5.129,  5.152,  5.175,  5.198,  5.221,  5.244,  5.267,\n",
              "        5.29 ,  5.313,  5.336,  5.359,  5.382,  5.405,  5.428,  5.451,\n",
              "        5.474,  5.497,  5.52 ,  5.543,  5.566,  5.589,  5.612,  5.635,\n",
              "        5.658,  5.681,  5.704,  5.727,  5.75 ])"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zH4-LVOR2_Tn"
      },
      "source": [
        "__Part 4__ \n",
        "\n",
        "* Plot this function on the intrval you created in __Part 3__. Include the __vertical asymptote__ in this graph. Choose your own __y limits__ for the plot. \n",
        "\n",
        "\n",
        "* Choose your own __colours__ for the plot and the vertical asymptote \n",
        "(see __https://matplotlib.org/examples/color/named_colors.html__)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3WsvRXok2_To",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        },
        "outputId": "c48f3a00-f72c-4004-da2a-a297ea139c87"
      },
      "source": [
        "plt.plot(t,u(t),color=\"red\")\n",
        "plt.axvline(0.75)\n",
        "plt.ylim([-100,100])\n",
        "plt.show()"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "R3rjunbd2_To"
      },
      "source": [
        "## Horizontal asymptotes\n",
        "\n",
        "* The horizontal asymptote of $f(x)$ is the value the function becomes as $x\\to+\\infty$ and as $x\\to-\\infty$.\n",
        "\n",
        "\n",
        "* When plotting rational functions, we sholud also include a horizontal line in the graph to indicate this horizontal asymptote of the function.\n",
        "\n",
        "\n",
        "* Formally, this may be done by taking the __limit__ of the funciton as $x\\to\\pm\\infty$, i.e. by evaluating $\\lim_{x\\to\\pm\\infty}f(x)$.\n",
        "\n",
        "\n",
        "* However, to do this in Python would require us to use the __sympy__ library, which we want to avoid for the time being, to keep things as simple as possible.\n",
        "\n",
        "\n",
        "* An alternative way to estimate these asymptotic values is to simply evlauate the function at __very large values of $x$__, to see if the function aproaches a specific asymptotic value."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bV44QyWu2_To"
      },
      "source": [
        "## Example 3\n",
        "\n",
        "Using the function __h__ defined in __Example 2__, estimate the asymptotic values of the function as $x\\to -\\infty$ and as $x\\to+\\infty$ by evaluating the following:\n",
        "$$\n",
        "h(\\pm10^3), h(\\pm10^6), h(\\pm10^9), h(\\pm10^{12}), h(\\pm10^{15}), h(\\pm10^{18}), h(10^{21}), h(\\pm10^{24})\n",
        "$$"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2p5nLMus2_To"
      },
      "source": [
        "#### Solution\n",
        "\n",
        "* We have already defined the function __h__ so there is no need to define it again. \n",
        "\n",
        "\n",
        "* We will evaluate the asymptotic values in two parts: First we are going to create a range of values we will call __large_x__, where we will evaluate the funciton. To do this we use the function __array()__\n",
        "\n",
        "* Using the Python notation __1E3 to mean $1\\times10^3$__, we can save alot of work and avoid having to write out a lot of zeros."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bPUhhqn32_To",
        "outputId": "4958fa73-9228-45cf-efed-7d3ef0214cd6"
      },
      "source": [
        "large_x=np.array([1E3,1E6,1E9,1E12,1E15,1E18,1E21,1E24])\n",
        "large_x"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1.e+03, 1.e+06, 1.e+09, 1.e+12, 1.e+15, 1.e+18, 1.e+21, 1.e+24])"
            ]
          },
          "metadata": {},
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SoRKBUlL2_To"
      },
      "source": [
        "* Now to __estimate__ the asymptotic limit $\\lim_{x\\to\\infty}h(t)$ we can just compute __h(large_x)__"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zKIhBo5m2_Tp",
        "outputId": "4dec8d9e-40ec-427a-e080-1aff95fb7faa"
      },
      "source": [
        "h(large_x)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1.00903614, 1.000009  , 1.00000001, 1.        , 1.        ,\n",
              "       1.        , 1.        , 1.        ])"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "o4PiAJgP2_Tp"
      },
      "source": [
        "* Hence we conclude that as $x\\to+\\infty$ then $h\\to +1$.\n",
        "\n",
        "* Evaluating the function on __-large_x__, we find:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ll-IosGv2_Tq",
        "outputId": "c3118e6d-8803-4db2-87df-2a6b81c0583a"
      },
      "source": [
        "h(-large_x)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.99103586, 0.999991  , 0.99999999, 1.        , 1.        ,\n",
              "       1.        , 1.        , 1.        ])"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aCOOgBj72_Tr"
      },
      "source": [
        "* We see that as $x\\to-\\infty$ then $h\\to 1$ also.\n",
        "\n",
        "\n",
        "* Hence the asymptotic value of the function is 1."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZMfSzFBg2_Tr"
      },
      "source": [
        "### Plotting the horizontal asymptote\n",
        "\n",
        "* Since the asymptotic value of __h__ is +1, the graph of __h__ will approach a horizontal line as the graph moves out to the left and right.\n",
        "\n",
        "\n",
        "* We can plot this __horizontal asymptote__ using the Python function __axhline()__. This will plot a horizontal line at the height specified.\n",
        "\n",
        "\n",
        "* Since the asymptotic limit of __h__ is $1$ as we estimated above, we should plot this horizontal line at height 1.\n",
        "\n",
        "\n",
        "* We will re-use the code from __Example 2__ and simply adjust it by including the new commad to plot the horizontal asymptote also."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        },
        "id": "kdmpfyBs2_Tr",
        "outputId": "ed4b19e9-656a-4642-e529-d9e10af879ce"
      },
      "source": [
        "X=np.linspace(0,8,501)\n",
        "x=X[np.where(X!=4)]\n",
        "plt.plot(x,h(x))\n",
        "plt.axvline(4)\n",
        "plt.axhline(1)\n",
        "plt.ylim([-100,100])\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ti9OZUnd2_Tt"
      },
      "source": [
        "* It is just about visible, but the horizontal line we just plotted is at height 1. \\\n",
        "\n",
        "\n",
        "* If we narrow the vertical range of the plot, the height of this horizontal asymptote should become clearer."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "9Jq3HGK12_Tt",
        "outputId": "b35537bb-3e87-46ab-b548-a0bb88eaa2ee"
      },
      "source": [
        "X=np.linspace(0,8,501)\n",
        "x=X[np.where(X!=4)]\n",
        "plt.plot(x,h(x))\n",
        "plt.axvline(4)\n",
        "plt.axhline(1)\n",
        "plt.ylim([-25,25])\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3PtiSwVF2_Tt"
      },
      "source": [
        "## Exercise 3\n",
        "\n",
        "__Part 1__ Using the Python function __U__ defined in __Exercise 2__, estimate the asymptotic limits $\\lim_{t\\to\\pm\\infty}U(t)$. \n",
        "\n",
        "* You may choose your own __large_x__, or re-use the once above, to estimate these asymptotic limits."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "j7v13-Tp2_Tu",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7b1d5e34-9c0b-4861-aefd-687fdcf69d99"
      },
      "source": [
        "large_x=np.array([1E3,1E6,1E9,1E12,1E15,1E18,1E21,1E24])\n",
        "large_x"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1.e+03, 1.e+06, 1.e+09, 1.e+12, 1.e+15, 1.e+18, 1.e+21, 1.e+24])"
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rDNZzbd12_Tu"
      },
      "source": [
        "__Part 2__ Create a plot of $U(t)$ showing both the horizontal and vertical asymptotes of the function also."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt"
      ],
      "metadata": {
        "id": "N1JkLUig7mPz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OjkEylCP2_Tu"
      },
      "source": [
        "# Obtuse Asymptotes\n",
        "\n",
        "* Given a rational polynomial of the form\n",
        "$$\n",
        "R(x)= \\frac{a_1x^2+a_2x+a_3}{b_1x+b_2}\n",
        "$$\n",
        "the graph of $R(x)$, will have a vertical asymptote and an __obtuse asymptote__. \n",
        "\n",
        "\n",
        "* Using __polynomial long-division__, it is possible to divide the denominator into the numerator and so re-write the expression in the form\n",
        "$$\n",
        "R(x)=mx+c+\\frac{K}{b_1x+b_2}.\n",
        "$$\n",
        "\n",
        "\n",
        "* This __obtuse asymptote__ is in the form of a straight line $y=mx+c$. \n",
        "\n",
        "\n",
        "* The __vertcal asymptote__ comes from singular point of the remainder term $\\frac{K}{b_1x+b_2}$. This vertical asymptote occurs at $x=-\\frac{b_2}{b_1}$ (the same as the original expression). \n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WOcER2KU2_Tu"
      },
      "source": [
        "### Polynomial long-division\n",
        "\n",
        "We can use the function __polydiv__ to perform the polynomial long-division for us automatically. First we import this function from the __numpy__ library in the cell below."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SO5cQ3Q42_Tv"
      },
      "source": [
        "from numpy import polydiv as pdiv"
      ],
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "U-cVrgYE2_Tw"
      },
      "source": [
        "### Example 4\n",
        "\n",
        "Use the __polydiv()__ function to write the function \n",
        "$$\n",
        "R(x)=\\frac{x^2-4x+3}{2x+5}\n",
        "$$\n",
        "in the form\n",
        "$$\n",
        "R(x)=mx+c+\\frac{K}{2x+5}.\n",
        "$$"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MGRjWaeF2_Tw"
      },
      "source": [
        "### Solution\n",
        "* To use th __polydiv()__ function, we just use to __coefficients__ of the numerator and denominator of the expression.\n",
        "\n",
        "\n",
        "* The __coefficients of the numerator__ $x^2-4x+3$ are:\n",
        "\n",
        "  *  1.0 (from the $x^2$ term)\n",
        "  * -4.0 (from the $-4x$-term)\n",
        "  * 3.0 (from the constant term).\n",
        "\n",
        "\n",
        "* The __coefficients of the denominator__ \n",
        "  *  2.0 (from the $2x$ term)\n",
        "  *  5.0 (from the constant term).\n",
        "\n",
        "\n",
        "* We now use these coefficients as follows"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4I4i4Mcd2_Tw",
        "outputId": "4a1df13e-88ab-4071-82a8-ae71acbb44d8"
      },
      "source": [
        "pdiv([1.0,-4.0,3.0],[2.0,5.0])"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([ 0.5 , -3.25]), array([19.25]))"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ozpgb0HB2_Tw"
      },
      "source": [
        "* This means the function $R(x)$ can be alternaitively written as \n",
        "$$\n",
        "R(x)=0.5x-3.25 +\\frac{19.25}{2x+5}\n",
        "$$"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "h83tMd6H2_Tx"
      },
      "source": [
        "### The obtuse asymptote\n",
        "\n",
        "* The obtuse asymtote of the fucntion $R(x)$ is now given by the function\n",
        "$$\n",
        "A(x)=0.5x-3.25,\n",
        "$$\n",
        "which is the equation of a line.\n",
        "\n",
        "\n",
        "* As $x\\to\\pm\\infty$, the graph of $R(x)$ approachdes this straight line. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "T78PjOXI2_Tx"
      },
      "source": [
        "### Example 5:\n",
        "\n",
        "Plot the function $R(x)$ and its obtuse asymptote, as found in __Example 4__."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cblneL-A2_Tx"
      },
      "source": [
        "#### Solution\n",
        "\n",
        "* We create Python functions to represent the function $R$ and the __asymptotic limit__ of $R$ as follows:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_mL2uMQC2_Ty"
      },
      "source": [
        "# The function R(x)\n",
        "def R(x):\n",
        "    return (x**2-4.0*x+3.0)/(2.0*x+3.0)\n",
        "\n",
        "# The Obtuse limit of R(x)\n",
        "def ObtuseR(x):\n",
        "    return 0.5*x-3.25"
      ],
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mOW0LzcU2_Ty"
      },
      "source": [
        "* Next we plot these functions on the same graph. \n",
        "\n",
        "\n",
        "* The graphs are plotted over the interval $-9\\leq x\\leq 5$\n",
        "\n",
        "\n",
        "* We do not worry about excluding the singularity from this interval, it does not seem to cause problems when we plot."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        },
        "id": "fBLKMiYR2_Ty",
        "outputId": "0a4d9e83-9abd-469b-bf6e-359a59007138"
      },
      "source": [
        "x=np.arange(-9,5,0.005)\n",
        "plt.plot(x,R(x))\n",
        "plt.plot(x,ObtuseR(x))\n",
        "plt.ylim([-20,20])\n",
        "plt.xlim([-9,5])\n",
        "plt.show()"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ffefuYxH2_Tz"
      },
      "source": [
        "* The vertical asymptote is plotted for us automatically.\n",
        "\n",
        "\n",
        "* The obtuse asymptote is shown in orange."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "emUaaG_32_Tz"
      },
      "source": [
        "### Exercise 4:\n",
        "\n",
        "Use the function __polydiv()__ to write the function\n",
        "$$\n",
        "Q(x)=\\frac{-3x^2+4x+5}{4x-1}\n",
        "$$\n",
        "in the form\n",
        "$$\n",
        " Q(x)=mx+c+\\frac{K}{4x-1}.\n",
        "$$\n",
        "\n",
        "That is to say, find the values of $m$, $c$ and $K$."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TdXKZINY2_Tz"
      },
      "source": [
        "def Q(x):\n",
        "  return (-3*x** + 4*x +5)/(4*x -1)\n",
        "\n",
        "def ObtuseQ(x):\n",
        "  return()\n"
      ],
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3mrpkW8g2_T0"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qMvbB3g12_T0"
      },
      "source": [
        "## Exercise 5:\n",
        "\n",
        "* Create Python functions to represent $Q(x)$ and its __obtuse asymptote__ $mx+c$ which you found in __Exercise 4__.\n",
        "\n",
        "\n",
        "* Using these Python functions, plot $Q(x)$ and its asymptotic limit over the interval $-8\\leq x<9$.\n",
        "\n",
        "\n",
        "* Set the $y$-range of this plot to be $-20\\leq y<20$, using the __ylim()__ funciton."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pab12WCF2_T0"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oEJaocGJ2_T0"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cyVc5ngzBSbN"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sCWzuwYVBSd1"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IUrHYKMK2_T1"
      },
      "source": [
        "# Submitting Your Work \n",
        "\n",
        "### Please ensure all changes are saved to your .ipynb file before submitting to Moodle!!!\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "a_XrRP902_T1"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}